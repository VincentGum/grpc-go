// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: helloworld/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// 服务端流式相应
	KeepSayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_KeepSayHelloClient, error)
	// 客户端流式发送
	GetAllCongras(ctx context.Context, opts ...grpc.CallOption) (Greeter_GetAllCongrasClient, error)
	// 双向流
	KeepReply(ctx context.Context, opts ...grpc.CallOption) (Greeter_KeepReplyClient, error)
	SayBye(ctx context.Context, in *ByeRequest, opts ...grpc.CallOption) (*ByeReply, error)
	GetAge(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*AgeReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) KeepSayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_KeepSayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], "/helloworld.Greeter/KeepSayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterKeepSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_KeepSayHelloClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterKeepSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterKeepSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) GetAllCongras(ctx context.Context, opts ...grpc.CallOption) (Greeter_GetAllCongrasClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], "/helloworld.Greeter/GetAllCongras", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterGetAllCongrasClient{stream}
	return x, nil
}

type Greeter_GetAllCongrasClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterGetAllCongrasClient struct {
	grpc.ClientStream
}

func (x *greeterGetAllCongrasClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterGetAllCongrasClient) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) KeepReply(ctx context.Context, opts ...grpc.CallOption) (Greeter_KeepReplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], "/helloworld.Greeter/KeepReply", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterKeepReplyClient{stream}
	return x, nil
}

type Greeter_KeepReplyClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterKeepReplyClient struct {
	grpc.ClientStream
}

func (x *greeterKeepReplyClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterKeepReplyClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) SayBye(ctx context.Context, in *ByeRequest, opts ...grpc.CallOption) (*ByeReply, error) {
	out := new(ByeReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/SayBye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetAge(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*AgeReply, error) {
	out := new(AgeReply)
	err := c.cc.Invoke(ctx, "/helloworld.Greeter/GetAge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// 服务端流式相应
	KeepSayHello(*HelloRequest, Greeter_KeepSayHelloServer) error
	// 客户端流式发送
	GetAllCongras(Greeter_GetAllCongrasServer) error
	// 双向流
	KeepReply(Greeter_KeepReplyServer) error
	SayBye(context.Context, *ByeRequest) (*ByeReply, error)
	GetAge(context.Context, *HelloRequest) (*AgeReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) KeepSayHello(*HelloRequest, Greeter_KeepSayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepSayHello not implemented")
}
func (UnimplementedGreeterServer) GetAllCongras(Greeter_GetAllCongrasServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllCongras not implemented")
}
func (UnimplementedGreeterServer) KeepReply(Greeter_KeepReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method KeepReply not implemented")
}
func (UnimplementedGreeterServer) SayBye(context.Context, *ByeRequest) (*ByeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayBye not implemented")
}
func (UnimplementedGreeterServer) GetAge(context.Context, *HelloRequest) (*AgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAge not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_KeepSayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).KeepSayHello(m, &greeterKeepSayHelloServer{stream})
}

type Greeter_KeepSayHelloServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterKeepSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterKeepSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_GetAllCongras_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).GetAllCongras(&greeterGetAllCongrasServer{stream})
}

type Greeter_GetAllCongrasServer interface {
	SendAndClose(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterGetAllCongrasServer struct {
	grpc.ServerStream
}

func (x *greeterGetAllCongrasServer) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterGetAllCongrasServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_KeepReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).KeepReply(&greeterKeepReplyServer{stream})
}

type Greeter_KeepReplyServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterKeepReplyServer struct {
	grpc.ServerStream
}

func (x *greeterKeepReplyServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterKeepReplyServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_SayBye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayBye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayBye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayBye(ctx, req.(*ByeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetAge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetAge(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "SayBye",
			Handler:    _Greeter_SayBye_Handler,
		},
		{
			MethodName: "GetAge",
			Handler:    _Greeter_GetAge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeepSayHello",
			Handler:       _Greeter_KeepSayHello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllCongras",
			Handler:       _Greeter_GetAllCongras_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "KeepReply",
			Handler:       _Greeter_KeepReply_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/helloworld.proto",
}
