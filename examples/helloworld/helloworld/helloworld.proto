// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "google.golang.org/grpc/examples/helloworld/helloworld";
option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  // 服务端流式相应
  rpc KeepSayHello (HelloRequest) returns (stream HelloReply) {}

  // 客户端流式发送
  rpc GetAllCongras (stream HelloRequest) returns (HelloReply) {}

  // 双向流
  rpc KeepReply (stream HelloRequest) returns (stream HelloReply) {}

  rpc SayBye (ByeRequest) returns (ByeReply) {}
  rpc GetAge (HelloRequest) returns (AgeReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
  int64 age = 2;
}
message ByeRequest {
  string name = 1;
  string info = 2;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}
message ByeReply {
  string message = 1;
}
message AgeReply {
  int64 age = 1;
}

// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative helloworld/helloworld.proto